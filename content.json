{"pages":[],"posts":[{"title":"Hello My Blog","text":"用来记录一下生活和搬砖过程中遇到和解决的问题","link":"/2019/11/11/Hello%20My%20Blog/"},{"title":"C++11新特性——匿名函数(lambda)","text":"C++11中的匿名函数(lambda函数,lambda表达式) 这篇文章是根据维基百科整理来的,原文请看:http://en.wikipedia.org/wiki/Anonymous_function#C.2B.2B 简介 C++11提供了对匿名函数的支持,称为Lambda函数(也叫Lambda表达式). Lambda表达式具体形式如下: [capture](parameters)-&gt;return-type{body} 如果没有参数,空的圆括号()可以省略.返回值也可以省略,如果函数体只由一条return语句组成或返回类型为void的话.形如: [capture](parameters){body} 下面举了几个Lambda函数的例子: 1234[](int x, int y) { return x + y; } // 隐式返回类型[](int&amp; x) { ++x; } // 没有return语句 -&gt; lambda 函数的返回类型是'void'[]() { ++global_x; } // 没有参数,仅访问某个全局变量[]{ ++global_x; } // 与上一个相同,省略了() 可以像下面这样显示指定返回类型: 1[](int x, int y) -&gt; int { int z = x + y; return z; } 在这个例子中创建了一个临时变量z来存储中间值. 和普通函数一样,这个中间值不会保存到下次调用. 什么也不返回的Lambda函数可以省略返回类型, 而不需要使用 -&gt; void 形式. Lambda函数可以引用在它之外声明的变量. 这些变量的集合叫做一个闭包. 闭包被定义在Lambda表达式声明中的方括号[]内. 这个机制允许这些变量被按值或按引用捕获.下面这些例子就是: 123456[] //未定义变量.试图在Lambda内使用任何外部变量都是错误的.[x, &amp;y] //x 按值捕获, y 按引用捕获.[&amp;] //用到的任何外部变量都隐式按引用捕获[=] //用到的任何外部变量都隐式按值捕获[&amp;, x] //x显式地按值捕获. 其它变量按引用捕获[=, &amp;z] //z按引用捕获. 其它变量按值捕获 例子遍历一个vector时，传统： 12345678int main() { vector&lt;int&gt; v; v.push_back(1); v.push_back(2);//... for ( auto itr = v.begin(), end = v.end(); itr != end; itr++ ) cout &lt;&lt; *itr; } Lambda: 123456789int main() { vector&lt;int&gt; v; v.push_back(1); v.push_back(2);//... for_each(v.begin(), v.end(), [](int val) { cout &lt;&lt; val; });}","link":"/2019/11/11/C++11%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0(lambda)/"}],"tags":[],"categories":[]}